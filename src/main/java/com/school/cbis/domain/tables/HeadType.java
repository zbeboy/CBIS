/**
 * This class is generated by jOOQ
 */
package com.school.cbis.domain.tables;


import com.school.cbis.domain.Cbis;
import com.school.cbis.domain.Keys;
import com.school.cbis.domain.tables.records.HeadTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HeadType extends TableImpl<HeadTypeRecord> {

	private static final long serialVersionUID = -89167396;

	/**
	 * The reference instance of <code>cbis.head_type</code>
	 */
	public static final HeadType HEAD_TYPE = new HeadType();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<HeadTypeRecord> getRecordType() {
		return HeadTypeRecord.class;
	}

	/**
	 * The column <code>cbis.head_type.id</code>.
	 */
	public final TableField<HeadTypeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>cbis.head_type.type_value</code>.
	 */
	public final TableField<HeadTypeRecord, String> TYPE_VALUE = createField("type_value", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

	/**
	 * The column <code>cbis.head_type.type_name</code>.
	 */
	public final TableField<HeadTypeRecord, String> TYPE_NAME = createField("type_name", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

	/**
	 * Create a <code>cbis.head_type</code> table reference
	 */
	public HeadType() {
		this("head_type", null);
	}

	/**
	 * Create an aliased <code>cbis.head_type</code> table reference
	 */
	public HeadType(String alias) {
		this(alias, HEAD_TYPE);
	}

	private HeadType(String alias, Table<HeadTypeRecord> aliased) {
		this(alias, aliased, null);
	}

	private HeadType(String alias, Table<HeadTypeRecord> aliased, Field<?>[] parameters) {
		super(alias, Cbis.CBIS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<HeadTypeRecord, Integer> getIdentity() {
		return Keys.IDENTITY_HEAD_TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<HeadTypeRecord> getPrimaryKey() {
		return Keys.KEY_HEAD_TYPE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<HeadTypeRecord>> getKeys() {
		return Arrays.<UniqueKey<HeadTypeRecord>>asList(Keys.KEY_HEAD_TYPE_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public HeadType as(String alias) {
		return new HeadType(alias, this);
	}

	/**
	 * Rename this table
	 */
	public HeadType rename(String name) {
		return new HeadType(name, null);
	}
}
