/**
 * This class is generated by jOOQ
 */
package com.school.cbis.domain.tables;


import com.school.cbis.domain.Cbis;
import com.school.cbis.domain.Keys;
import com.school.cbis.domain.tables.records.UserTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserType extends TableImpl<UserTypeRecord> {

	private static final long serialVersionUID = -1454073058;

	/**
	 * The reference instance of <code>cbis.user_type</code>
	 */
	public static final UserType USER_TYPE = new UserType();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UserTypeRecord> getRecordType() {
		return UserTypeRecord.class;
	}

	/**
	 * The column <code>cbis.user_type.id</code>.
	 */
	public final TableField<UserTypeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>cbis.user_type.name</code>.
	 */
	public final TableField<UserTypeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	/**
	 * Create a <code>cbis.user_type</code> table reference
	 */
	public UserType() {
		this("user_type", null);
	}

	/**
	 * Create an aliased <code>cbis.user_type</code> table reference
	 */
	public UserType(String alias) {
		this(alias, USER_TYPE);
	}

	private UserType(String alias, Table<UserTypeRecord> aliased) {
		this(alias, aliased, null);
	}

	private UserType(String alias, Table<UserTypeRecord> aliased, Field<?>[] parameters) {
		super(alias, Cbis.CBIS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<UserTypeRecord, Integer> getIdentity() {
		return Keys.IDENTITY_USER_TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<UserTypeRecord> getPrimaryKey() {
		return Keys.KEY_USER_TYPE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<UserTypeRecord>> getKeys() {
		return Arrays.<UniqueKey<UserTypeRecord>>asList(Keys.KEY_USER_TYPE_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserType as(String alias) {
		return new UserType(alias, this);
	}

	/**
	 * Rename this table
	 */
	public UserType rename(String name) {
		return new UserType(name, null);
	}
}
